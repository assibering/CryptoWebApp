###########################################
# BUILDER stage
###########################################
FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim AS builder
ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy

# Disable Python downloads, because we want to use the system interpreter
# across both images. If using a managed Python version, it needs to be
# copied from the build image into the final image; see `standalone.Dockerfile`
# for an example.
ENV UV_PYTHON_DOWNLOADS=0

WORKDIR /app
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev
ADD . /app
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

###########################################
# UNIT TEST stage
###########################################
FROM python:3.12-slim-bookworm AS unit-test
# It is important to use the image that matches the builder, as the path to the
# Python executable must be the same, e.g., using `python:3.11-slim-bookworm`
# will fail.

# Copy the application from the builder
COPY --from=builder --chown=app:app /app /app

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH="/app"

# Run unit tests by default (using config from pyproject.toml)
CMD ["python", "-m", "pytest", "app/tests/unit"]

###########################################
# INTEGRATION TEST stage
###########################################
FROM python:3.12-slim-bookworm AS integration-test

# Copy the application from the builder
COPY --from=builder --chown=app:app /app /app

# Install bash for scripting
RUN apt-get update && apt-get install -y bash

# Test-specific env
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH="/app"

# Create test runner script
RUN echo '#!/bin/bash\n\
echo "👉 Starting server..."\n\
uvicorn src.main:app --host 0.0.0.0 --port 8000 & \n\
SERVER_PID=$!\n\
\n\
echo "👉 Waiting for server to start..."\n\
sleep 5\n\
\n\
echo "👉 Running integration tests..."\n\
python -m pytest app/tests/integration\n\
TEST_EXIT_CODE=$?\n\
\n\
echo "👉 Stopping server..."\n\
kill $SERVER_PID\n\
\n\
exit $TEST_EXIT_CODE\n\
' > /app/run_integration_tests.sh && chmod +x /app/run_integration_tests.sh

# Run integration tests by default
CMD ["/app/run_integration_tests.sh"]

###########################################
# FULL TEST stage (unit + integration)
###########################################
FROM python:3.12-slim-bookworm AS full-test

# Copy the application from the builder
COPY --from=builder --chown=app:app /app /app

# Install bash for scripting
RUN apt-get update && apt-get install -y bash

# Test-specific env
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH="/app"

# Create test runner script
RUN echo '#!/bin/bash\n\
echo "👉 Running unit tests..."\n\
python -m pytest app/tests/unit\n\
UNIT_TEST_EXIT_CODE=$?\n\
\n\
if [ $UNIT_TEST_EXIT_CODE -ne 0 ]; then\n\
    echo "❌ Unit tests failed with exit code $UNIT_TEST_EXIT_CODE"\n\
    exit $UNIT_TEST_EXIT_CODE\n\
fi\n\
\n\
echo "👉 Starting server..."\n\
uvicorn src.main:app --host 0.0.0.0 --port 8000 & \n\
SERVER_PID=$!\n\
\n\
echo "👉 Waiting for server to start..."\n\
sleep 5\n\
\n\
echo "👉 Running integration tests..."\n\
python -m pytest app/tests/integration\n\
INTEGRATION_TEST_EXIT_CODE=$?\n\
\n\
echo "👉 Stopping server..."\n\
kill $SERVER_PID\n\
\n\
exit $INTEGRATION_TEST_EXIT_CODE\n\
' > /app/run_all_tests.sh && chmod +x /app/run_all_tests.sh

# Run all tests by default
CMD ["/app/run_all_tests.sh"]

###########################################
# PRODUCTION stage
###########################################
FROM python:3.12-slim-bookworm AS production

# Copy the application from the builder
COPY --from=builder --chown=app:app /app /app

# Production-specific env
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH="/app"

# Default prod command (no reload)
CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]