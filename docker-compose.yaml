
services:
  postgresql:
    build:
      context: ./PostgresDB
      dockerfile: Dockerfile
      target: no-crypto-fetch-setup
    container_name: crypto_postgres
    env_file:
      - ./PostgresDB/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  localstack:
    container_name: "crypto_localstack"
    image: localstack/localstack:latest
    env_file:
      - ./localstack/environments/.env.local
    ports:
      - "127.0.0.1:4566:4566"            # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
    volumes:
      - localstack_data:/var/lib/localstack
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  user_service_unit:
    # Build the image from the Dockerfile in the /UserService directory
    build:
      context: ./UserService
      dockerfile: Dockerfile.dev
      target: production #unit-test, integration-test, full-test, production (no tests are run)
    container_name: crypto_user_service
    env_file:
      - ./UserService/.env

    # Host the FastAPI application on port 8000
    ports:
      - "8000:8000"

    depends_on:
      postgresql:
        condition: service_healthy


    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: rebuild
          path: .
          target: /app
          # Exclude the project virtual environment — it could be for a
          # different platform in the container
          ignore:
            - .venv/

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./uv.lock
  
  subscription_service_unit:
    # Build the image from the Dockerfile in the /UserService directory
    build:
      context: ./SubscriptionService
      dockerfile: Dockerfile.dev
      target: production #unit-test, integration-test, full-test, production (no tests are run)
    container_name: crypto_subscription_service
    env_file:
      - ./SubscriptionService/.env

    # Host the FastAPI application on port 8000
    ports:
      - "8001:8001"

    depends_on:
      postgresql:
        condition: service_healthy


    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: rebuild
          path: .
          target: /app
          # Exclude the project virtual environment — it could be for a
          # different platform in the container
          ignore:
            - .venv/

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./uv.lock

volumes:
  postgres_data:
    driver: local
  localstack_data:
    driver: local